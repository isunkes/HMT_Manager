<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:djs="services.djs.*"
					   xmlns:mixes="services.mixes.*"
					   xmlns:valueObjects="valueObjects.*"
					   xmlns:views="views.*"
					   width="700" height="575" backgroundColor="#000000"
					   applicationComplete="init()"
					   showStatusBar="false">
	
	<fx:Script>
		<![CDATA[
			import events.EditMixEvent;
			import events.LoginEvent;
			import events.SaveDJEvent;
			import events.SaveDJMixEvent;
			import events.createMixEvent;
			import events.getDJEvent;
			
			import mx.collections.ArrayCollection;
			import mx.containers.ViewStack;
			import mx.controls.Alert;
			import mx.events.IndexChangedEvent;
			import mx.rpc.events.ResultEvent;
			
			import mx.events.AIREvent;
			import air.net.URLMonitor;
			import air.update.events.UpdateEvent;
			import air.update.ApplicationUpdaterUI;
			import mx.controls.Alert;
			import flash.events.UncaughtErrorEvent; // Requires Flash Player 10.1
			import mx.controls.Alert;
			import flash.filesystem.File;
			import flash.filesystem.FileMode;
			import flash.filesystem.FileStream;
			
			protected var monitor:URLMonitor;
			protected var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI(); // Used for auto-update
			protected var file:File; // Used for preferences file
			protected var currentVersion:String="1.0.0"
			
			protected function init():void
			{
				
				// Request to be notified when this application is activated (brought forward as the active window)
				// or deactivated
				addEventListener(AIREvent.APPLICATION_ACTIVATE, onAppActivate);
				addEventListener(AIREvent.APPLICATION_DEACTIVATE, onAppDeactivate);
				
				// Center main AIR app window on the screen
				nativeWindow.x = (Capabilities.screenResolutionX - nativeWindow.width) / 2;
				nativeWindow.y = (Capabilities.screenResolutionY - nativeWindow.height) / 2;
				// Invoke listener - request to be notified when the AIR app is invoked (started), this could occur from the command line, UI or
				// from opening an associated file
				NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvoke);
				
				// Detecting online/offline network connectivity with a URLMonitor
				monitor = new URLMonitor(new URLRequest("http://www.adobe.com")); // change URL to URL desired
				monitor.addEventListener(StatusEvent.STATUS, onStatusChange);
				monitor.pollInterval = 20000;// Milliseconds
				monitor.start();
				
				// Check for update
				this.checkUpdate();
				
				// Detects a general change in network status
				NativeApplication.nativeApplication.addEventListener(Event.NETWORK_CHANGE,onNetworkChange);
				
				// Detecting if user is present
				NativeApplication.nativeApplication.idleThreshold = 5;
				NativeApplication.nativeApplication.addEventListener(Event.USER_IDLE, onUserIdle);
				NativeApplication.nativeApplication.addEventListener (Event.USER_PRESENT, onUserPresent);
				
				// Get notified whan a global error occurs
				loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, errorHandler);
				
				/* Create a native menu with two items in the top-level application menu. 
				var item1:NativeMenuItem;
				if (NativeApplication.supportsMenu)
				{
					var nativeMenu:NativeMenu = new NativeMenu();
					item1 = new NativeMenuItem("File");
					var item2:NativeMenuItem = new NativeMenuItem("Window");
					nativeMenu.addItem(item1);
					nativeMenu.addItem(item2);
					
					var menuItem:NativeMenuItem = new NativeMenuItem("My App Menu");
					menuItem.submenu = nativeMenu;
					NativeApplication.nativeApplication.menu.addItem(menuItem);
					item1.addEventListener(Event.SELECT,onItemSelect);
				}
				else if (NativeWindow.supportsMenu)
				{
					var menu:NativeMenu = new NativeMenu();
					nativeWindow.menu = menu;
					item1 = stage.nativeWindow.menu.addItem(new NativeMenuItem("My App Menu"));
					item1.addEventListener(Event.SELECT,onItemSelect);
				}*/
				
				// Manually close all open Windows when app closes.
				this.nativeWindow.addEventListener(Event.CLOSING,onAppWinClose);
				
				// Create a file for storing preferences in the application storage directory
				file = File.applicationStorageDirectory;
				file = file.resolvePath("Preferences/version.txt");
				trace("Preferences file location: " + file.nativePath);
				if (file.exists)
					checkVersion();
				else firstRun();
				
				
				
			}
			// The application is now in the foreground and active
			protected function onAppActivate(event:Event):void {
				trace("Handling application activate event");
			}
			
			// Handle the application being sent to the background
			protected function onAppDeactivate(event:Event):void {
				trace("Handling application deactivate event");
			}// Called when application is first invoked
			protected function onInvoke(invokeEvt:InvokeEvent):void 
			{
				trace("Handling invoke event");
			}// Handles when the HTTP Network status has changed.
			protected function onStatusChange(e:StatusEvent):void
			{
				if (monitor.available) 
				{
					trace("Network is online");
				} else {
					trace("Network is offline");
				}
			}// This function is triggered when the application finished loading.
			// Initialize appUpdater and set some properties
			protected function checkUpdate():void
			{
				// set the URL for the update.xml file
				appUpdater.updateURL = "http://www.hostmytrack.com/update.xml";
				appUpdater.addEventListener(UpdateEvent.INITIALIZED, onUpdate);
				appUpdater.addEventListener(ErrorEvent.ERROR, onUpdaterError);
				// Hide the dialog asking for permission for checking for a new update.
				// If you want to see it just leave the default value (or set true).
				appUpdater.isCheckForUpdateVisible = false;
				appUpdater.initialize();
			}
			
			// Handler function triggered by the ApplicationUpdater.initialize.
			// The updater was initialized and it is ready to take commands.
			protected function onUpdate(event:UpdateEvent):void 
			{
				// start the process of checking for a new update and to install
				appUpdater.checkNow();
			}
			
			// Handler function for error events triggered by the ApplicationUpdater.initialize
			protected function onUpdaterError(event:ErrorEvent):void
			{
				Alert.show(event.toString());
			}// The network status has changed
			protected function onNetworkChange(e:Event):void
			{
				trace("Network State Changed");
			}// Called when the user is idle 
			protected function onUserIdle(event:Event):void {
				trace("Handling user idle event");
			}
			
			// Called when the user is active again - status will change if idle for more than 5 seconds
			protected function onUserPresent(event:Event):void
			{
				trace("Handling user present event");
			}// Handle Global Errors
			protected function errorHandler(e:UncaughtErrorEvent):void
			{
				e.preventDefault();
				Alert.show("An error has occurred and been caught by the global error handler: " + e.error.toString(), "My Global Error Handler");
			}// Handle Menu item selection
			
			//protected function onItemSelect(e:Event):void
			//{
			//	trace("Menu item selected");
			//}
			
			// Called when application window closes
			protected function onAppWinClose(e:Event):void
			{
				trace("Handling application window close event");
				closeOpenWindows(e);
			}
			
			// Closes all open windows
			protected function closeOpenWindows(e:Event):void
			{
				// This code can be uncommented to prevent the default close action from occurringand first call the close method on each open window to
				// perform any actions needed. Closes each from most recently opened to oldest.
				//e.preventDefault();
				//for (var i:int = NativeApplication.nativeApplication.openedWindows.length - 1; i>= 0; --i)
				//{
				//NativeWindow(NativeApplication.nativeApplication.openedWindows[i]).close();
				//}
			}
			// Check for current version from saved prefs file. If no file exists, this is the first time run
			protected function checkVersion():void
			{
				var stream:FileStream = new FileStream();
				stream.open(file, FileMode.READ);
				var prevVersion:String = stream.readUTFBytes(stream.bytesAvailable);
				stream.close();
				if (prevVersion == currentVersion) {
					trace("Current version running");
				}
				else
				{
					writeVersionFile();
				}
			}
			
			protected function firstRun():void
			{
				trace("First time the application has been run, save to the file.");
				writeVersionFile();
			}
			
			protected function writeVersionFile():void
			{
				var stream:FileStream = new FileStream();
				stream.open(file, FileMode.WRITE);
				stream.writeUTFBytes(currentVersion);
				stream.close();
			}		
			
			
			[Bindable]
			private var djId:Number;
			[Bindable]
			private var MessageText:String = "";
			[Bindable]
			private var passwordText:String = "";
			[Bindable]
			private var usernameText:String = "";
			[Bindable]
			private var mixComplete:Number;
			[Bindable]
			private var djNameText:String = "Test";
			[Bindable]
			private var firstNameText:String;
			[Bindable]
			private var lastNameText:String;
			[Bindable]
			private var bioText:String;
			[Bindable]
			private var emailText:String;
			[Bindable]
			private var djImage:String = 'assets/placeHolderDJBig.png';
			[Bindable]
			private var mixObject:Object;
			[Bindable]
			public var mixFile:String = 'Not Uploaded Yet';
			[Bindable]
			public var mixImage:String = 'assets/placeHolderMix.png';
			private function loginView_login2Handler(event:LoginEvent):void
			{
				LoginResult.addEventListener(ResultEvent.RESULT,onLogin);
				LoginResult.token = dJs.Login(event.username, event.password);
				passwordText = event.password;
				usernameText = event.username;
				
			}
			
			protected function onLogin(event:ResultEvent):void
			{
				
				if(loginStruct.SUCCESS == "1")
				{
					djId = loginStruct.ID;
					MessageText = '';
					managerMainView.getMixesResult.token = mixes.getMixes(djId);
					appStack.selectedIndex = 1;
				}
				else
				{
					MessageText = loginStruct.MESSAGE;
					
				}
			}
			
			
			protected function onGetDJ(event:ResultEvent):void
			{
				
				djNameText = event.result[0].djName;
				firstNameText = event.result[0].firstName;
				lastNameText = event.result[0].lastName;
				bioText = event.result[0].bio;
				emailText = event.result[0].email;
				if (event.result[0].imageBig != null)
				{
					djImage = event.result[0].imageBig;
				}
				else
				{
					djImage = "assets/placeHolderDJBig.png";
				}
				
			}
			
			protected function appStack_changeHandler(event:IndexChangedEvent):void
			{
				getDJResult.addEventListener(ResultEvent.RESULT,onGetDJ);
				getDJResult.token = dJs.getDJ(djId);
			}
			
			protected function editProfileView_saveDjFormHandler(event:SaveDJEvent):void
			{
				saveDJResult.addEventListener(ResultEvent.RESULT,onSaveDJ);
				saveDJResult.token = dJs.saveDJ(djId, event.djName, event.firstName, event.lastName, event.bioText, event.emailText);
				
			}
			protected function onSaveDJ(event:ResultEvent):void
			{
				appStack.selectedIndex = 1;
			}
			
			
			protected function managerMainView_editSelectedMixHandler(event:EditMixEvent):void
			{
				mixObject = event.mixObject;
				mixFile = mixObject.mixFileUser;
				mixComplete = mixObject.complete;
				if (mixComplete == 2)
				{
					editMixView.currentState = 'awaiting';
				}
				else if (mixComplete == 1)
				{
					editMixView.currentState = 'encoded';
				}
				else
				{
					editMixView.currentState = 'showreadybox';
				}
				appStack.selectedIndex = 3;
				
				
				
			}
			
			protected function managerMainView_addNewMixHandler(event:createMixEvent):void
			{
				createMixResult.addEventListener(ResultEvent.RESULT,onCreatemix);
				createMixResult.token = mixes.createMix(djId);
				
			}
			
			protected function onCreatemix(event:ResultEvent):void
			{
				mixObject = event.result[0];
				mixFile = mixObject.mixFileUser;
				editMixView.currentState = 'showreadybox';
				appStack.selectedIndex = 3;
				
			}
			
			protected function editMixView_SaveMixHandler(event:SaveDJMixEvent):void
			{
				saveMixResult.addEventListener(ResultEvent.RESULT,onSaveDJMix);
				saveMixResult.token = mixes.saveMix(event.mixID, event.mixName, event.mixYear, event.mixGenre, event.mixDesc, event.readyTobeEncoded);
			}
			
			
			protected function onSaveDJMix(event:ResultEvent):void
			{
				appStack.selectedIndex = 1;
				managerMainView.getMixesResult.token = mixes.getMixes(djId);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<djs:DJs id="dJs"
				 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
				 showBusyCursor="true"/>
		<s:CallResponder id="LoginResult" 
						 result="loginStruct = LoginResult.lastResult as LoginStruct"/>
		<valueObjects:LoginStruct id="loginStruct"/>
		
		
		
		<s:CallResponder id="getDJResult" 
						 result="djStruct = getDJResult.lastResult as DJStruct"/>
		<valueObjects:DJStruct id="djStruct"/>
		<s:CallResponder id="saveDJResult"/>
		<s:CallResponder id="createMixResult"/>
		<mixes:Mixes id="mixes"
					 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
					 showBusyCursor="true"/>
		<s:CallResponder id="saveMixResult"/>
		
		
		
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<mx:ViewStack id="appStack" x="6" y="6" width="687" height="558" borderVisible="false" change="appStack_changeHandler(event)" >
		<views:LoginView width="100%" height="100%" label="LoginView" id="loginView"  login2="loginView_login2Handler(event)" 
						 MessageText="{MessageText}" usernameText="{usernameText}" passwordText="{passwordText}" >
		</views:LoginView>
		<views:ManagerMainView width="100%" height="100%" label="ManagerMainView" id="managerMainView" 
							   djId="{djId}" djNameText="{djNameText}" djImage="{djImage}"
							   editSelectedMix="managerMainView_editSelectedMixHandler(event)"
							   addNewMix="managerMainView_addNewMixHandler(event)">
		</views:ManagerMainView>
		<views:EditProfileView width="100%" height="100%" label="EditProfileView" id="editProfileView"
							   djId="{djId}" djNameText="{djNameText}" firstNameText="{firstNameText}" 
							   lastNameText="{lastNameText}" bioText="{bioText}" djImage="{djImage}" emailText="{emailText}"
							   saveDjForm="editProfileView_saveDjFormHandler(event)"
							   >
		</views:EditProfileView>
		<views:EditMixView width="100%" height="100%" label="EditMixView" id="editMixView" 
						   mixObject="{mixObject}" djId="{djId}" mixFile="{mixObject.mixFileUser}"  mixImage="{mixObject.mixImageBig}"
						   mixComplete="{mixObject.complete}"
						   SaveMix="editMixView_SaveMixHandler(event)">
		</views:EditMixView>
		
	</mx:ViewStack>
</s:WindowedApplication>
